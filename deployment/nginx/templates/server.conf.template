# Server Configuration Template for Cloud Infrastructure Platform
# Template variables:
# - {{DOMAIN_NAME}}: Primary domain name for the server
# - {{APP_NAME}}: Application name used for directory paths
# - {{ENVIRONMENT}}: Environment (development, staging, production)
# - {{API_UPSTREAM}}: Upstream name for API backend (default: backend_api)
# - {{RATE_LIMIT_BURST}}: API rate limit burst parameter
# - {{STATIC_MAX_AGE}}: Cache duration for static assets
# - {{STATIC_MAX_AGE_SECONDS}}: Cache duration for static assets in seconds
# - {{ENABLE_WEBSOCKETS}}: Whether to enable WebSocket support (true/false)
# - {{ENABLE_WAF}}: Whether to enable ModSecurity WAF (true/false)

# Define rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_conn_zone $binary_remote_addr zone=api_conn:10m;
limit_req_zone $binary_remote_addr zone=auth_limit:5m rate=5r/s;
limit_req_zone $binary_remote_addr zone=websocket:5m rate=30r/s;

# HTTP server block - redirects to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name {{DOMAIN_NAME}} www.{{DOMAIN_NAME}};
    
    # Hide NGINX version information
    server_tokens off;

    # Redirect all HTTP to HTTPS with 301 (permanent) redirect
    location / {
        return 301 https://$host$request_uri;
    }

    # Allow Let's Encrypt validation
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        allow all;
    }
    
    # Health check endpoint for load balancers
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }
    
    # Block access to hidden files
    location ~ /\. {
        deny all;
        return 404;
    }
}

# HTTPS server block - main application server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name {{DOMAIN_NAME}};
    
    # Document root location
    root /var/www/{{APP_NAME}}/public;
    index index.html;
    
    # SSL configuration using shared config
    include conf.d/ssl.conf;
    
    # Security headers
    include conf.d/security-headers.conf;
    
    # Hide NGINX version
    server_tokens off;

    {{#ENVIRONMENT_STAGING}}
    # Add staging banner for non-production environments
    add_header X-Environment "staging" always;
    sub_filter '</head>' '<style>body::before{content:"STAGING ENVIRONMENT";position:fixed;top:0;left:0;right:0;background:#ff9800;color:#fff;text-align:center;padding:5px;z-index:9999;font-weight:bold;}</style></head>';
    sub_filter_once on;
    {{/ENVIRONMENT_STAGING}}
    
    {{#ENVIRONMENT_DEVELOPMENT}}
    # Add development banner for non-production environments
    add_header X-Environment "development" always;
    sub_filter '</head>' '<style>body::before{content:"DEVELOPMENT ENVIRONMENT";position:fixed;top:0;left:0;right:0;background:#f44336;color:#fff;text-align:center;padding:5px;z-index:9999;font-weight:bold;}</style></head>';
    sub_filter_once on;
    {{/ENVIRONMENT_DEVELOPMENT}}

    # Include location blocks from separate file for maintainability
    include conf.d/location.conf;

    # API endpoint configuration
    location /api/ {
        # Apply rate limiting with burst
        limit_req zone=api_limit burst={{RATE_LIMIT_BURST}} nodelay;
        limit_conn api_conn 10;
        
        # Security headers for API
        proxy_hide_header X-Powered-By;
        add_header X-Content-Type-Options "nosniff" always;
        
        # Proxy to backend API
        proxy_pass http://{{API_UPSTREAM}};
        include conf.d/proxy-params.conf;
        
        # Timeout settings
        proxy_read_timeout 60s;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
    }
    
    # Authentication endpoints with stricter rate limiting
    location /api/auth/ {
        # Stricter rate limiting for auth endpoints
        limit_req zone=auth_limit burst=5 nodelay;
        limit_req_status 429;
        
        # No caching for auth responses
        add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        
        # Proxy to backend
        proxy_pass http://{{API_UPSTREAM}};
        include conf.d/proxy-params.conf;
        
        # Shorter timeout for auth requests
        proxy_read_timeout 30s;
    }
    
    {{#ENABLE_WEBSOCKETS}}
    # WebSocket configuration
    location /api/ws {
        proxy_pass http://{{API_UPSTREAM}};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_read_timeout 3600s;
        
        # Add IP forwarding headers
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Apply rate limiting specific to WebSockets
        limit_req zone=websocket burst=30 nodelay;
    }
    {{/ENABLE_WEBSOCKETS}}

    # Health check endpoint
    location /health {
        access_log off;
        proxy_pass http://{{API_UPSTREAM}}/api/health;
        proxy_read_timeout 5s;
        include conf.d/proxy-params.conf;
        
        # No caching for health checks
        add_header Cache-Control "no-store, no-cache, must-revalidate" always;
    }
    
    # Deny access to sensitive files and directories
    location ~ /\. {
        deny all;
        return 404;
    }
    
    # Deny access to configuration files
    location ~* \.(env|config|ini|conf|md|sql|log|yml|yaml|sample)$ {
        deny all;
        return 404;
    }

    # Custom error pages
    error_page 404 /404.html;
    location = /404.html {
        root /var/www/{{APP_NAME}}/static/error;
        internal;
    }
    
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /var/www/{{APP_NAME}}/static/error;
        internal;
    }
    
    # Set client body size limits
    client_max_body_size 16M;
    
    # Logging configuration
    access_log /var/log/nginx/{{APP_NAME}}-access.log main buffer=16k flush=10s;
    error_log /var/log/nginx/{{APP_NAME}}-error.log warn;

    # Enable ModSecurity WAF if available
    {{#ENABLE_WAF}}
    include conf.d/modsecurity.conf;
    {{/ENABLE_WAF}}
}

# Redirect www to non-www
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.{{DOMAIN_NAME}};
    
    # SSL configuration using shared config
    include conf.d/ssl.conf;
    
    # Security headers
    include conf.d/security-headers.conf;
    
    # Hide NGINX version
    server_tokens off;
    
    # Redirect all traffic to non-www version
    return 301 https://{{DOMAIN_NAME}}$request_uri;
    
    # Logging configuration
    access_log /var/log/nginx/redirect-access.log main buffer=4k flush=1m;
    error_log /var/log/nginx/redirect-error.log warn;
}