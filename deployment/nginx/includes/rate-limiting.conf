# Rate Limiting Configuration for Cloud Infrastructure Platform
# Include this file in server blocks where rate limiting is needed

# Define rate limiting zones for different types of requests
# Format: limit_req_zone $binary_remote_addr zone=name:size rate=rate;

# API rate limiting - 30 requests per second with bursting
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;

# Authentication endpoints - 5 requests per second to prevent brute force
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

# WebSocket connections - 5 requests per second
limit_req_zone $binary_remote_addr zone=websocket:10m rate=5r/s;

# Webhook endpoints - 20 requests per second
limit_req_zone $binary_remote_addr zone=webhooks:10m rate=20r/s;

# Public API endpoints - more permissive at 100 requests per second
limit_req_zone $binary_remote_addr zone=public_api:10m rate=100r/s;

# Static assets - 300 requests per second
limit_req_zone $binary_remote_addr zone=static:10m rate=300r/s;

# Admin endpoints - very restricted at 2 requests per second
limit_req_zone $binary_remote_addr zone=admin:5m rate=2r/s;

# ICS (Industrial Control Systems) endpoints - 10 requests per second
limit_req_zone $binary_remote_addr zone=ics:5m rate=10r/s;

# Global rate limiting for all requests - 300 requests per second
limit_req_zone $binary_remote_addr zone=global:20m rate=300r/s;

# Rate limiting by IP for connection limiting
limit_conn_zone $binary_remote_addr zone=per_ip:10m;

# Application-level variables for dynamic rate limiting
map $http_x_api_client $client_limit_key {
    default         $binary_remote_addr;
    "~internal"     "";  # Skip rate limiting for internal clients
}

# Status code based rate limiting for error responses
map $status $is_error_response {
    ~^5     1;
    default 0;
}

# Define status code rate limiting zone
limit_req_zone $binary_remote_addr$is_error_response zone=error_limiting:10m rate=5r/s;

# Custom variables for more advanced rate limiting
map $request_uri $api_section {
    default                     "generic";
    ~^/api/v1/cloud            "cloud";
    ~^/api/v1/auth             "auth";
    ~^/api/v1/ics              "ics";
    ~^/api/v1/admin            "admin";
}

# Store limit zone configuration in a variable for conditional use
map $api_section $zone_to_use {
    "cloud"    "api";
    "auth"     "auth";
    "ics"      "ics";
    "admin"    "admin";
    default    "global";
}

# Example of how to use these rate limits in a location block:
# location /api/ {
#     limit_req zone=api burst=20 nodelay;
#     
#     # Log rate limited requests
#     limit_req_log_level warn;
#     
#     # Status code when rate limit is exceeded
#     limit_req_status 429;
# }
#
# location /api/auth {
#     limit_req zone=auth burst=5;
#     limit_req_status 429;
# }
#
# location /api/admin {
#     limit_req zone=admin burst=2;
#     limit_conn per_ip 5;
#     limit_req_status 429;
#     limit_conn_status 429;
# }
#
# location /static/ {
#     limit_req zone=static burst=50 nodelay;
# }

# Global connection limit - apply in server context
# limit_conn per_ip 20;