# URL Redirect Configuration for Cloud Infrastructure Platform
# This file defines URL redirection rules for maintaining compatibility,
# handling legacy URLs, and enforcing canonical domains.

# Configuration for www to non-www redirection
server {
    listen 80;
    listen [::]:80;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    # Use variables for easier environment-specific configuration
    server_name www.${DOMAIN_NAME};
    
    # Include SSL configuration if accessed via HTTPS
    if ($server_port = 443) {
        include conf.d/ssl.conf;
    }
    
    # Redirect all www traffic to non-www (canonical domain)
    return 301 $scheme://${DOMAIN_NAME}$request_uri;
    
    # Basic logging
    access_log /var/log/nginx/redirect-access.log main buffer=4k flush=1m;
    error_log /var/log/nginx/redirect-error.log warn;
}

# Redirect for legacy domain
server {
    listen 80;
    listen [::]:80;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    # Old domain that needs to be redirected
    server_name legacy-domain.example.com;
    
    # Include SSL configuration if accessed via HTTPS
    if ($server_port = 443) {
        include conf.d/ssl.conf;
        # Specify certificate paths if different from main domain
        # ssl_certificate /etc/ssl/certs/legacy-domain.crt;
        # ssl_certificate_key /etc/ssl/private/legacy-domain.key;
    }
    
    # Redirect to new domain
    return 301 $scheme://${DOMAIN_NAME}$request_uri;
    
    # Basic logging with buffer for performance
    access_log /var/log/nginx/legacy-redirect-access.log main buffer=4k flush=1m;
    error_log /var/log/nginx/legacy-redirect-error.log warn;
}

# Redirect for specific API version paths
server {
    listen 80;
    listen [::]:80;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    server_name api.${DOMAIN_NAME};
    
    # Include SSL configuration if accessed via HTTPS
    if ($server_port = 443) {
        include conf.d/ssl.conf;
    }
    
    # Security headers even for redirects
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Map legacy API version paths to new structure
    location ~ ^/v1/(.*)$ {
        return 301 $scheme://${DOMAIN_NAME}/api/$1;
    }
    
    # Redirect the root to API documentation
    location = / {
        return 301 $scheme://${DOMAIN_NAME}/api/docs;
    }
    
    # Default redirect for any other paths
    location / {
        return 301 $scheme://${DOMAIN_NAME}/api/;
    }
    
    # Logging configuration
    access_log /var/log/nginx/api-redirect-access.log main buffer=4k flush=1m;
    error_log /var/log/nginx/api-redirect-error.log warn;
}

# Path-based redirects for the main domain
server {
    listen 80;
    listen [::]:80;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    server_name ${DOMAIN_NAME};
    
    # Include SSL configuration if accessed via HTTPS
    if ($server_port = 443) {
        include conf.d/ssl.conf;
    }
    
    # Redirect from old paths to new paths
    location /old-path/ {
        return 301 /new-path/;
    }
    
    # Redirect specific pages or resources
    location = /old-page.html {
        return 301 /new-page.html;
    }
    
    # Redirect old API paths
    location ~ ^/legacy-api/(.*)$ {
        return 301 /api/$1;
    }
    
    # Redirect old documentation
    location /docs/v1/ {
        return 301 /documentation/;
    }
    
    # Special rewrite for a complex URL pattern
    # Example: /product-123-name.html -> /products/123/name
    location ~ ^/product-(\d+)-([a-zA-Z0-9-]+)\.html$ {
        return 301 /products/$1/$2;
    }
    
    # Rewrite for campaign tracking parameters
    if ($args ~ "campaign=([^&]+)") {
        set $campaign $1;
        rewrite ^/promo$ /special-offer?source=$campaign permanent;
    }
    
    # Maintenance mode redirects (can be enabled/disabled)
    # set $maintenance 0;  # Set to 1 to enable
    # if ($maintenance = 1) {
    #     return 307 /maintenance.html;
    # }
    
    # Error pages should not be redirected
    location ~ ^/(404|50[0-9])\.html$ {
        # Do nothing - serve directly
    }
    
    # Allow Let's Encrypt validation
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
    
    # Specify the root location to prevent default matching
    # if none of the above matches
    location / {
        # This can be handled by the main server block in cloud-platform.conf
        return 404;
    }
    
    # Basic logging
    access_log /var/log/nginx/path-redirect-access.log main;
    error_log /var/log/nginx/path-redirect-error.log warn;
}

# HTTP to HTTPS redirect for all domains not handled above
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    # Hide server information
    server_tokens off;
    
    # Add security headers even for redirect
    add_header X-Content-Type-Options "nosniff" always;
    
    # Allow Let's Encrypt validation
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
    
    # Redirect everything else to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
    
    # Minimal logging for redirects
    access_log /var/log/nginx/http-redirect-access.log main buffer=4k flush=1m;
    error_log /var/log/nginx/http-redirect-error.log warn;
}