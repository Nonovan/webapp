# Monitoring Configuration for Cloud Infrastructure Platform
# This file defines how monitoring endpoints are handled

# Upstream definition for monitoring backend
upstream monitoring_backend {
    server 127.0.0.1:5000;  # Same backend as API but can be separate if needed
}

# Prometheus metrics
location /metrics {
    # Restrict access to internal networks only
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    # No caching for metrics
    add_header Cache-Control no-store;
    
    # Hide Prometheus version
    proxy_hide_header X-Prometheus-Api-Version;
    
    # Proxy to application metrics endpoint
    proxy_pass http://monitoring_backend;
    include conf.d/proxy-params.conf;
}

# Health check and monitoring endpoints
location /monitoring/ {
    # Apply auth validation
    auth_request /auth/validate;
    
    # Admin-only access
    limit_req zone=api_limit burst=10 nodelay;
    
    # Pass to backend
    proxy_pass http://monitoring_backend;
    include conf.d/proxy-params.conf;
    
    # Realtime data should not be cached
    add_header Cache-Control no-store;
    
    # Websocket support for real-time monitoring
    location /monitoring/ws {
        include conf.d/websocket.conf;
    }
}

# Simple health check endpoint for load balancers and monitoring systems
location = /health {
    # Allow public access but limit request rate
    limit_req zone=api_limit burst=20 nodelay;
    
    # Return status directly from NGINX for basic health checks
    return 200 "OK";
    
    # Add useful headers
    add_header Content-Type text/plain;
    add_header X-Content-Type-Options nosniff;
}

# Detailed health check that communicates with the backend
location = /health/detailed {
    # Restrict to internal networks
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    deny all;
    
    # Pass to backend health check
    proxy_pass http://monitoring_backend/monitoring/health;
    include conf.d/proxy-params.conf;
    
    # Set short timeout
    proxy_read_timeout 5s;
}

# WAF status endpoint
location = /health/waf {
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    deny all;
    
    # Return ModSecurity status
    return 200 "ModSecurity: $modsec_status";
    add_header Content-Type text/plain;
}

# Performance debugging endpoints - admin only
location /monitoring/debug/ {
    # Strict access control
    allow 127.0.0.1;  # Local access only
    deny all;
    
    # Auth required
    auth_request /auth/validate-admin;
    
    # Pass to backend
    proxy_pass http://monitoring_backend;
    include conf.d/proxy-params.conf;
    
    # No caching
    add_header Cache-Control no-store;
    add_header X-Content-Type-Options nosniff;
}

# Allow access to security scanning endpoints with specific API key
location /monitoring/security-scan {
    # Check for valid scan token
    if ($http_x_security_token != $security_scan_token) {
        return 403;
    }
    
    # Pass to backend
    proxy_pass http://monitoring_backend;
    include conf.d/proxy-params.conf;
    
    # Increase timeout for security scans
    proxy_read_timeout 300s;
}

# Status page for external monitoring systems
location = /status {
    # This endpoint shows high-level status without exposing details
    proxy_pass http://monitoring_backend/monitoring/public-status;
    include conf.d/proxy-params.conf;
    
    # Cache status for 1 minute
    proxy_cache api_cache;
    proxy_cache_valid 200 1m;
    
    # Security headers
    include conf.d/security-headers.conf;
}

# Alert webhook endpoints - allow monitoring tools to trigger alerts
location /monitoring/alert-hook {
    # Restrict to authorized systems
    allow 10.0.0.0/8;
    allow 192.168.0.0/16;
    deny all;
    
    # JSON only
    if ($content_type !~ application/json) {
        return 415;  # Unsupported Media Type
    }
    
    # Rate limiting
    limit_req zone=webhooks burst=10 nodelay;
    
    # Pass to backend
    proxy_pass http://monitoring_backend;
    include conf.d/proxy-params.conf;
    
    # Require HTTPS
    if ($scheme != "https") {
        return 400 "HTTPS required";
    }
}

# Blocking for metrics fetch errors
error_page 500 502 503 504 =503 /50x-monitoring.html;
location = /50x-monitoring.html {
    root /usr/share/nginx/html;
    internal;
}