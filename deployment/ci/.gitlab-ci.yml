# GitLab CI/CD Configuration for Cloud Infrastructure Platform
# This file defines the continuous integration and deployment workflow for GitLab

stages:
  - prepare
  - test
  - security
  - build
  - deploy
  - verify

variables:
  PYTHON_VERSION: "3.9"
  NODE_VERSION: "16"
  PYTEST_ARGS: "--cov=. --cov-report=xml"
  DOCKER_REGISTRY: "registry.example.com"
  DOCKER_IMAGE: "${DOCKER_REGISTRY}/cloud-platform"

# Cache dependencies between jobs
cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .venv/
    - node_modules/

# Template for deployment environments
.environment_variables: &environment_variables
  before_script:
    - if [ -f "deployment/environments/${DEPLOY_ENV}.env" ]; then
        source deployment/environments/${DEPLOY_ENV}.env;
      fi

### Stage: Prepare ###
prepare:
  stage: prepare
  image: python:${PYTHON_VERSION}
  script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip setuptools wheel
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - pip install pytest pytest-cov bandit safety
    # Install Node.js dependencies if needed
    - if [ -f "package.json" ]; then
        curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -;
        apt-get install -y nodejs;
        npm install;
      fi
  artifacts:
    paths:
      - .venv/
      - node_modules/

### Stage: Test ###
unit_tests:
  stage: test
  image: python:${PYTHON_VERSION}
  script:
    - source .venv/bin/activate
    - pytest ${PYTEST_ARGS} tests/unit/
  artifacts:
    reports:
      junit: test-results/unit-tests.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

integration_tests:
  stage: test
  image: python:${PYTHON_VERSION}
  services:
    - postgres:13
    - redis:6
  variables:
    POSTGRES_DB: cloud_platform_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/cloud_platform_test"
    REDIS_URL: "redis://redis:6379/0"
  script:
    - source .venv/bin/activate
    - pytest ${PYTEST_ARGS} tests/integration/
  artifacts:
    reports:
      junit: test-results/integration-tests.xml
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^release\//'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

### Stage: Security ###
security_checks:
  stage: security
  image: python:${PYTHON_VERSION}
  script:
    - source .venv/bin/activate
    - mkdir -p security-reports
    - bandit -r . -x tests/,venv/,.venv/ -o security-reports/bandit-report.json -f json
    - safety check -r requirements.txt --json > security-reports/safety-report.json
    - python deployment/ci/scripts/dependency_check.py
    - python deployment/ci/scripts/sast_scan.py
  artifacts:
    paths:
      - security-reports/
    reports:
      sast: security-reports/gl-sast-report.json

sonarqube_scan:
  stage: security
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.projectKey=cloud-platform -Dsonar.sources=. -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.python.coverage.reportPaths=coverage.xml
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^release\//'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

### Stage: Build ###
build_package:
  stage: build
  image: python:${PYTHON_VERSION}
  script:
    - source .venv/bin/activate
    - bash deployment/scripts/collect_static.sh
    - python deployment/ci/scripts/build_package.py
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

build_docker:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker build -t ${DOCKER_IMAGE}:${CI_COMMIT_SHORT_SHA} -t ${DOCKER_IMAGE}:latest .
    - echo "${DOCKER_REGISTRY_PASSWORD}" | docker login ${DOCKER_REGISTRY} -u ${DOCKER_REGISTRY_USER} --password-stdin
    - docker push ${DOCKER_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - docker push ${DOCKER_IMAGE}:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^release\//'

### Stage: Deploy ###
deploy_staging:
  stage: deploy
  image: python:${PYTHON_VERSION}
  variables:
    DEPLOY_ENV: staging
  <<: *environment_variables
  script:
    - source .venv/bin/activate
    - bash deployment/scripts/pre_deploy_check.sh staging
    - bash deployment/scripts/deploy.sh staging
    - bash deployment/scripts/post_deploy_check.sh staging
  environment:
    name: staging
    url: https://staging.example.com
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

deploy_production:
  stage: deploy
  image: python:${PYTHON_VERSION}
  variables:
    DEPLOY_ENV: production
  <<: *environment_variables
  script:
    - source .venv/bin/activate
    - bash deployment/scripts/pre_deploy_check.sh production
    - bash deployment/scripts/deploy.sh production
    - bash deployment/scripts/post_deploy_check.sh production
  environment:
    name: production
    url: https://cloud-platform.example.com
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/'

### Stage: Verify ###
verify_staging:
  stage: verify
  image: python:${PYTHON_VERSION}
  variables:
    DEPLOY_ENV: staging
  <<: *environment_variables
  script:
    - source .venv/bin/activate
    - bash deployment/scripts/smoke-test.sh staging
    - bash deployment/scripts/health-check.sh staging
    - bash deployment/scripts/performance-test.sh staging --duration 30
  environment:
    name: staging
    url: https://staging.example.com
  needs:
    - deploy_staging
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

verify_production:
  stage: verify
  image: python:${PYTHON_VERSION}
  variables:
    DEPLOY_ENV: production
  <<: *environment_variables
  script:
    - source .venv/bin/activate
    - bash deployment/scripts/smoke-test.sh production
    - bash deployment/scripts/health-check.sh production
    - python deployment/scripts/security_audit.py --environment production
  environment:
    name: production
    url: https://cloud-platform.example.com
  needs:
    - deploy_production
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/'