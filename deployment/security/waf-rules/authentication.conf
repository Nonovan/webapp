# Authentication protection rules for Cloud Infrastructure Platform
# These rules protect authentication endpoints and mechanisms

# Brute force prevention for login
SecRule REQUEST_URI "@streq /api/auth/login" \
    "chain,id:80001,phase:1,pass,nolog,setenv:auth_attempt=1"
SecRule REQUEST_METHOD "@streq POST" \
    "setvar:ip.login_attempt=+1,expirevar:ip.login_attempt=3600"

SecRule IP:LOGIN_ATTEMPT "@gt 5" \
    "id:80002,phase:1,deny,status:403,log,msg:'Login Brute Force Attempt'"

# Password reset rate limiting
SecRule REQUEST_URI "@rx ^/api/auth/reset" \
    "chain,id:80003,phase:1,pass,nolog,setenv:pw_reset_attempt=1"
SecRule REQUEST_METHOD "@streq POST" \
    "setvar:ip.reset_attempt=+1,expirevar:ip.reset_attempt=86400"

SecRule IP:RESET_ATTEMPT "@gt 3" \
    "id:80004,phase:1,deny,status:403,log,msg:'Password Reset Rate Limit Exceeded'"

# MFA validation attempts
SecRule REQUEST_URI "@streq /api/auth/mfa/validate" \
    "chain,id:80005,phase:1,pass,nolog,setenv:mfa_attempt=1"
SecRule REQUEST_METHOD "@streq POST" \
    "setvar:ip.mfa_attempt=+1,expirevar:ip.mfa_attempt=900"

SecRule IP:MFA_ATTEMPT "@gt 5" \
    "id:80006,phase:1,deny,status:403,log,msg:'MFA Validation Rate Limit Exceeded'"

# Session hijacking protection
SecRule REQUEST_COOKIES:/^(session|auth_token|JSESSIONID)/ "!@rsub s/.*_.*//" \
    "chain,id:80007,phase:1,deny,status:403,log,msg:'Session Hijacking Attempt'"
SecRule &REQUEST_HEADERS:User-Agent "@eq 1" \
    "chain"
SecRule &REQUEST_HEADERS:X-Forwarded-For "@eq 1" \
    "chain"
SecRule &REQUEST_HEADERS:X-Real-IP "@eq 1" ""

# Detect automated login attempts
SecRule REQUEST_URI "@streq /api/auth/login" \
    "chain,id:80008,phase:1,deny,status:403,log,msg:'Automated Login Attempt'"
SecRule REQUEST_HEADERS:User-Agent "@rx (?i:(?:bot|spider|crawler|phantom|headless|automated|curl|wget|requests|python|ruby|java|http|client))" ""

# CSRF token enforcement
SecRule REQUEST_METHOD "!@rx ^(GET|HEAD|OPTIONS)$" \
    "chain,id:80009,phase:1,deny,status:403,log,msg:'Missing CSRF Token'"
SecRule REQUEST_URI "@rx ^/(?!api/)" \
    "chain"
SecRule &REQUEST_HEADERS:X-CSRF-Token "@eq 0" ""

# CORS pre-flight check enforcement
SecRule REQUEST_METHOD "@streq OPTIONS" \
    "chain,id:80010,phase:1,deny,status:403,log,msg:'Invalid CORS Request'"
SecRule &REQUEST_HEADERS:Origin "@eq 1" \
    "chain"
SecRule &REQUEST_HEADERS:Access-Control-Request-Method "@eq 0" ""

# Session timeout enforcement
SecRule REQUEST_COOKIES:/session/ "@rx ^.+$" \
    "chain,id:80011,phase:1,deny,status:440,log,msg:'Session Expired'"
SecRule &REQUEST_COOKIES:session_time "@eq 1" \
    "chain"
SecRule REQUEST_COOKIES:session_time "@lt %{TIME_EPOCH}" ""

# OAuth state parameter validation
SecRule REQUEST_URI "@rx ^/api/auth/oauth2/callback" \
    "chain,id:80012,phase:1,deny,status:403,log,msg:'Missing OAuth State Parameter'"
SecRule &ARGS:state "@eq 0" ""

# Prevent credentials in URL
SecRule ARGS_NAMES "@rx (?i:(?:pass|pwd|passwd|password|auth|credentials|token|api.?key|secret))" \
    "id:80013,phase:1,deny,status:403,log,msg:'Credentials in URL'"

# Detect credential stuffing 
SecRule IP:SUCCESSFUL_AUTH "@eq 0" \
    "chain,id:80014,phase:5,pass,nolog,setvar:ip.failed_ratio=+1,expirevar:ip.failed_ratio=3600"
SecRule ENV:AUTH_ATTEMPT "@eq 1" ""

SecRule IP:FAILED_RATIO "@gt 10" \
    "id:80015,phase:1,deny,status:403,log,msg:'Potential Credential Stuffing Attack'"

# Exception for certain automation endpoints
SecRule REQUEST_URI "@rx ^/api/auth/service" \
    "chain,id:80050,phase:1,pass,nolog"
SecRule REQUEST_HEADERS:User-Agent "@contains Cloud-Platform-Service" \
    "ctl:ruleRemoveById=80008"

# Exception for trusted IPs
SecRule REMOTE_ADDR "@ipMatchFromFile trusted-auth-ips.conf" \
    "id:80051,phase:1,pass,nolog,ctl:ruleRemoveById=80002,ctl:ruleRemoveById=80004,ctl:ruleRemoveById=80006,ctl:ruleRemoveById=80015"