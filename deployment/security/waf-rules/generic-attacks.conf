# Generic Attack protection rules for Cloud Infrastructure Platform
# These rules protect against common web attack patterns not covered by specific rule sets

# HTTP Protocol Violation
SecRule REQUEST_HEADERS:Content-Length "!@rx ^[0-9]+$" \
    "id:120001,phase:1,t:none,block,log,msg:'Invalid Content-Length Header'"

SecRule REQUEST_HEADERS:Transfer-Encoding "!@rx ^(chunked|compress|deflate|gzip|identity)$" \
    "id:120002,phase:1,t:none,t:lowercase,block,log,msg:'Invalid Transfer-Encoding Header'"

# HTTP Request Smuggling
SecRule REQUEST_HEADERS:Content-Length "@rx ^[0-9]+$" \
    "chain,id:120003,phase:1,t:none,block,log,msg:'HTTP Request Smuggling Attack'"
SecRule REQUEST_HEADERS:Transfer-Encoding "@rx chunked" \
    "t:none,t:lowercase"

# HTTP Response Splitting
SecRule REQUEST_URI|ARGS|ARGS_NAMES|REQUEST_HEADERS "@rx [\r\n]+" \
    "id:120004,phase:1,t:none,t:urlDecodeUni,block,log,msg:'HTTP Response Splitting Attack'"

# Range Header DoS (CVE-2011-3192)
SecRule REQUEST_HEADERS:Range|REQUEST_HEADERS:Request-Range "@rx ^bytes=(?:,?-?[0-9]+)+$" \
    "chain,id:120005,phase:1,t:none,block,log,msg:'Range Header DoS Attack'"
SecRule MATCHED_VAR "@contains ,," ""

# HTTP Parameter Pollution
SecRule &ARGS_NAMES:/(.*)/@ "@gt 3" \
    "id:120006,phase:2,t:none,block,log,msg:'HTTP Parameter Pollution'"

# Host header attacks
SecRule REQUEST_HEADERS:Host "!@rx ^([a-zA-Z0-9\-\.]*)(:([0-9]*))?$" \
    "id:120007,phase:1,t:none,block,log,msg:'Invalid Host Header'"

# Bad robots detection
SecRule REQUEST_HEADERS:User-Agent "@pmFromFile bad-robots.txt" \
    "id:120008,phase:1,t:none,block,log,msg:'Known Bad Robot'"

# Block abnormal HTTP methods
SecRule REQUEST_METHOD "!@rx ^(?:GET|HEAD|POST|PUT|DELETE|OPTIONS|PATCH)$" \
    "id:120009,phase:1,t:none,block,log,msg:'Abnormal HTTP Method'"

# Prevent use of proxy request headers that could be used for cache poisoning
SecRule REQUEST_HEADERS:Proxy-Host|REQUEST_HEADERS:Proxy-Request "@rx ." \
    "id:120010,phase:1,t:none,block,log,msg:'Proxy Header Abuse'"

# XML attacks
SecRule XML:/* "@rx (?:<!ENTITY|\[<!ENTITY|\<\!DOCTYPE[^\>]*\[\s*\<\!ENTITY)" \
    "id:120011,phase:2,t:none,block,log,msg:'XML Entity Attack'"

# Abnormal query string detection
SecRule ARGS "@rx %[01][\dA-F]" \
    "id:120012,phase:2,t:none,t:urlDecodeUni,t:lowercase,block,log,msg:'Null Byte Injection'"

# Header manipulation check
SecRule REQUEST_HEADERS:X-Forwarded-For|REQUEST_HEADERS:X-Forwarded-Host|REQUEST_HEADERS:X-Forwarded-Proto "@rx [^-0-9a-zA-Z.:\[\], ]" \
    "id:120013,phase:1,t:none,block,log,msg:'Invalid X-Forwarded Header Value'"

# Detect Webshell access indicators
SecRule REQUEST_URI "@rx (?:shell|backdoor|c99|r57|webshell|cmd|exec)" \
    "id:120014,phase:1,t:none,t:lowercase,block,log,msg:'Potential Webshell Access'"

# Detect suspicious HTTP headers that could indicate scanning tools
SecRule REQUEST_HEADERS:/^(?!Accept|Connection|Content-|Host$|User-Agent$|Referer$|Cookie$|Authorization$|X-|Origin$|Pragma$|Cache-Control$)/ "@rx ." \
    "id:120015,phase:1,t:none,block,log,msg:'Suspicious HTTP Header'"

# Detect usage of non-standard ports in URL
SecRule REQUEST_URI "@rx (?i)https?://[^/:]+(:[0-9]{1,5})" \
    "chain,id:120016,phase:1,t:none,block,log,msg:'URL with Non-Standard Port',severity:'MEDIUM',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-protocol'"
SecRule MATCHED_VAR "!@rx (?i)https?://[^/:]+(:(443|80))(?:/|$)" ""

# Detect potential clickjacking attempts
SecRule REQUEST_URI|ARGS|REQUEST_BODY "@rx (?i)<iframe\s+.*src=" \
    "id:120017,phase:2,t:none,t:htmlEntityDecode,block,log,msg:'Potential Clickjacking Attempt',severity:'MEDIUM',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-xss'"

    "chain,id:120019,phase:2,t:none,t:lowercase,block,log,msg:'Unexpected Base64 Data',severity:'MEDIUM',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-injection'"
SecRule ARGS "@rx ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$" \
    "t:removeWhitespace"

# Detect potential template injection attacks
SecRule ARGS|REQUEST_BODY "@rx \{\{\s*[\$\._]|\{\%\s*for|<\?php|\$\{.*\}|\{\{\s*[\[\(]|\{\{\s*[a-zA-Z0-9_]+\.|\{\{\s*[a-zA-Z0-9_]+\[" \
    "id:120020,phase:2,t:none,t:urlDecodeUni,block,log,msg:'Template Injection Attempt',severity:'HIGH',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-injection'"


# Exception for trusted monitoring systems
SecRule REMOTE_ADDR "@ipMatchFromFile monitoring-ips.conf" \
    "id:120050,phase:1,pass,nolog,ctl:ruleRemoveById=120008,ctl:ruleRemoveById=120015"

# Exception for development environment
SecRule REQUEST_HEADERS:X-Environment "@streq development" \
    "chain,id:120051,phase:1,pass,nolog"
SecRule REMOTE_ADDR "@ipMatchFromFile developer-ips.conf" \
    "ctl:ruleRemoveById=120013,ctl:ruleRemoveById=120019,ctl:ruleRemoveById=120020"

# Exception for internal API calls
SecRule REMOTE_ADDR "@ipMatchFromFile internal-api-ips.conf" \
    "id:120052,phase:1,pass,nolog,ctl:ruleRemoveById=120016,ctl:ruleRemoveById=120019"

# Detect AWS/Cloud credentials in requests
SecRule ARGS|REQUEST_BODY "@rx (?i)(aws_access_key_id|aws_secret_access_key|api_key|api[_\-]?secret|password|passwd|pwd|token|secret)[\"']?\s*[:=]\s*[\"']?[A-Za-z0-9/\+]{20,}" \
    "id:120021,phase:2,t:none,t:lowercase,t:removeWhitespace,block,log,msg:'Potential Credential Leakage',severity:'HIGH',tag:'application-multi',tag:'language-multi',tag:'platform-multi',tag:'attack-disclosure'"

# Detect PHP serialized objects in requests (potential insecure deserialization)
SecRule REQUEST_HEADERS|ARGS|REQUEST_BODY "@rx [oc]:[0-9]+:\"[^\"]+\":[0-9]+:{.*}" \
    "id:120018,phase:2,t:none,block,log,msg:'PHP Object Injection Attempt',severity:'CRITICAL',tag:'application-multi',tag:'language-php',tag:'platform-multi',tag:'attack-injection'"

