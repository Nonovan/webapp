# Security Headers Configuration for Cloud Infrastructure Platform
# Include this file in your server blocks

# Content Security Policy (CSP)
# NOTE: The CSP_NONCE environment variable should be set for each request
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'nonce-${CSP_NONCE}' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; img-src 'self' data:; font-src 'self' https://cdn.jsdelivr.net; connect-src 'self'; frame-ancestors 'none'; form-action 'self'; base-uri 'self'; object-src 'none'; upgrade-insecure-requests;" always;

# HTTP Strict Transport Security (HSTS)
add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

# Prevent clickjacking attacks
add_header X-Frame-Options "DENY" always;

# Prevent MIME type sniffing
add_header X-Content-Type-Options "nosniff" always;

# Configure Cross-site scripting (XSS) Protection
add_header X-XSS-Protection "1; mode=block" always;

# Set referrer policy
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Set permissions policy (formerly feature policy)
add_header Permissions-Policy "geolocation=(), camera=(), microphone=(), payment=(), accelerometer=(), gyroscope=(), magnetometer=(), face=(), usb=(), interest-cohort=()" always;

# Hide version information
server_tokens off;

# CORS headers configuration with proper validation for API endpoints
# These maps should be in http context, not in server context
# Move these to the http block in your main NGINX config if not already there
map $http_origin $cors_origin {
    default "";
    "~^https?://localhost(:[0-9]+)?$" "$http_origin";  # Development
    "~^https?://127\.0\.0\.1(:[0-9]+)?$" "$http_origin";  # Development
    "~^https://([^.]+\.)?example\.com$" "$http_origin";  # Production domains
    "~^https://([^.]+\.)?trusted-domain\.com$" "$http_origin";  # Trusted domains
}

map $cors_origin $cors_methods {
    default "";
    "~.+" "GET, POST, PUT, DELETE, OPTIONS";  # Only set methods if origin was allowed
}

map $request_uri $is_api_request {
    default 0;
    "~^/api/" 1;
}

# Add CORS headers only for API requests
add_header Access-Control-Allow-Origin $cors_origin if=$is_api_request;
add_header Access-Control-Allow-Methods $cors_methods if=$is_api_request;
add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, X-Requested-With, X-CSRF-Token" if=$is_api_request;
add_header Access-Control-Allow-Credentials "true" if=$is_api_request;
add_header Access-Control-Max-Age "3600" if=$is_api_request;
add_header Vary "Origin" if=$is_api_request;

# Security headers override protection
add_header X-Content-Security-Policy-Report-Only "default-src 'none'; report-uri /api/security/report" always;

# Set cookie policy (Note: this won't apply to dynamic cookies set by the application)
# This should be handled at the application level for most cookies
# proxy_cookie_path / "/; HttpOnly; Secure; SameSite=Strict";
