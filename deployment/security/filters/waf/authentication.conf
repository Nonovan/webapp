# Authentication protection rules for Cloud Infrastructure Platform
# These rules protect authentication endpoints and mechanisms

# Brute force prevention for login
SecRule REQUEST_URI "@streq /api/auth/login" \
    "chain,id:80001,phase:1,pass,nolog,setenv:auth_attempt=1"
SecRule REQUEST_METHOD "@streq POST" \
    "setvar:ip.login_attempt=+1,expirevar:ip.login_attempt=3600"

SecRule IP:LOGIN_ATTEMPT "@ge 6" \
    "id:80002,phase:1,deny,status:429,log,msg:'Login Brute Force Attempt - Too Many Requests',logdata:'%{REMOTE_ADDR} exceeded login attempts'"

# Password reset rate limiting
SecRule REQUEST_URI "@rx ^/api/auth/reset" \
    "chain,id:80003,phase:1,pass,nolog,setenv:pw_reset_attempt=1"
SecRule REQUEST_METHOD "@streq POST" \
    "setvar:ip.reset_attempt=+1,expirevar:ip.reset_attempt=86400"

SecRule IP:RESET_ATTEMPT "@ge 4" \
    "id:80004,phase:1,deny,status:429,log,msg:'Password Reset Rate Limit Exceeded - Too Many Requests',logdata:'%{REMOTE_ADDR} exceeded password reset attempts'"

# MFA validation attempts
SecRule REQUEST_URI "@streq /api/auth/mfa/validate" \
    "chain,id:80005,phase:1,pass,nolog,setenv:mfa_attempt=1"
SecRule REQUEST_METHOD "@streq POST" \
    "setvar:ip.mfa_attempt=+1,expirevar:ip.mfa_attempt=900"

SecRule IP:MFA_ATTEMPT "@ge 6" \
    "id:80006,phase:1,deny,status:429,log,msg:'MFA Validation Rate Limit Exceeded - Too Many Requests',logdata:'%{REMOTE_ADDR} exceeded MFA validation attempts'"

# Session hijacking protection - fixed logic to properly detect potential session hijacking
SecRule REQUEST_URI "!" \
    "chain,id:80007,phase:2,capture,t:none,nolog,pass,setvar:tx.session_cookie=%{REQUEST_COOKIES:/^(session|auth_token|JSESSIONID)/}"

SecRule TX:SESSION_COOKIE "!@streq ''" \
    "chain,id:80008,phase:2,deny,status:403,log,msg:'Possible Session Hijacking Attempt',logdata:'%{REMOTE_ADDR} with User-Agent: %{REQUEST_HEADERS.User-Agent}'"
SecRule REQUEST_HEADERS:User-Agent "!@within %{SESSION:previous_user_agent}" \
    "chain"
SecRule REMOTE_ADDR "!@within %{SESSION:previous_ip}" ""

# On successful login, store user agent and IP for later comparison
SecRule REQUEST_URI "@streq /api/auth/login" \
    "chain,id:80009,phase:5,pass,nolog,t:none"
SecRule RESPONSE_STATUS "@eq 200" \
    "setvar:session.previous_user_agent=%{REQUEST_HEADERS.User-Agent},setvar:session.previous_ip=%{REMOTE_ADDR}"

# Detect automated login attempts - improved bot detection regex
SecRule REQUEST_URI "@streq /api/auth/login" \
    "chain,id:80010,phase:1,deny,status:403,log,msg:'Automated Login Attempt Blocked',logdata:'%{REMOTE_ADDR} with User-Agent: %{REQUEST_HEADERS.User-Agent}'"
SecRule REQUEST_HEADERS:User-Agent "@rx (?i:(?:bot|spider|crawler|phantom|headless|selenium|webdriver|puppeteer|playwright|automated|scripted|curl|wget|requests|python|ruby|java|httpclient|okhttp|apachehttpclient))" ""

# CSRF token enforcement - fixed to only apply to relevant paths
SecRule REQUEST_METHOD "!@rx ^(GET|HEAD|OPTIONS)$" \
    "chain,id:80011,phase:1,deny,status:403,log,msg:'Missing CSRF Token',logdata:'%{REMOTE_ADDR} attempted to access %{REQUEST_URI} without CSRF token'"
SecRule REQUEST_URI "!@rx ^/(api/auth/login|api/public|swagger|health)" \
    "chain"
SecRule &REQUEST_HEADERS:X-CSRF-Token "@eq 0" \
    "chain"
SecRule &REQUEST_HEADERS:X-XSRF-Token "@eq 0" ""

# Block suspicious authentication payloads with potential SQL injection
SecRule REQUEST_URI "@rx ^/api/auth/(login|reset|register)" \
    "chain,id:80012,phase:2,deny,status:403,log,msg:'Suspicious Authentication Payload',logdata:'%{REMOTE_ADDR} sent suspicious payload'"
SecRule REQUEST_BODY "@rx (?i:(?:'\s*or\s*'|\"\s*or\s*\"|\sor\s+1=1|;.*;|--|/\*|\*/|@@version|sleep\s*\(|waitfor\s+delay|select\s+.*\s+from))" ""

# Enforce secure flags on cookies
SecRule RESPONSE_HEADERS:/Set-Cookie/ "!@rx (?i:HttpOnly)" \
    "chain,id:80013,phase:3,deny,status:500,log,msg:'Cookie Missing HttpOnly Flag'"
SecRule REQUEST_HEADERS:Host "!@rx ^(?:localhost|127\.0\.0\.1)" \
    "chain"
SecRule RESPONSE_HEADERS:/Set-Cookie/ "!@rx (?i:Secure)" ""

# Enforce password complexity on registration 
SecRule REQUEST_URI "@streq /api/auth/register" \
    "chain,id:80014,phase:2,deny,status:400,log,msg:'Password Fails Complexity Requirements'"
SecRule REQUEST_METHOD "@streq POST" \
    "chain"
SecRule REQUEST_BODY "@rx \"password\":\s*\"[^\"]{0,7}\"" ""

# Block access to sensitive authentication paths from unexpected networks
# Uncomment and customize for your specific internal network range
# SecRule REQUEST_URI "@rx ^/api/auth/admin" \
#     "chain,id:80015,phase:1,deny,status:403,log,msg:'Unauthorized Admin Auth Access'"
# SecRule REMOTE_ADDR "!@ipMatch 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16" ""

# Exception for certain automation endpoints
SecRule REQUEST_URI "@rx ^/api/auth/service" \
    "chain,id:80050,phase:1,pass,nolog"
SecRule REQUEST_HEADERS:User-Agent "@contains Cloud-Platform-Service" \
    "ctl:ruleRemoveById=80010"

# Exception for trusted IPs
SecRule REMOTE_ADDR "@ipMatchFromFile trusted-auth-ips.conf" \
    "id:80051,phase:1,pass,nolog,ctl:ruleRemoveById=80002,ctl:ruleRemoveById=80004,ctl:ruleRemoveById=80006,ctl:ruleRemoveById=80015"