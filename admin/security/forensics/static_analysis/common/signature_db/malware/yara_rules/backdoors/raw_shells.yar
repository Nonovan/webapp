/*
  YARA rules for detecting system-level backdoors and reverse shells

  These rules target raw command shells, reverse connections, and system
  backdoors that allow unauthorized remote access to systems.

  Part of the Forensic Analysis Toolkit
*/

import "pe"
import "elf"

rule Backdoor_Generic_ShellCommand_Execution {
    meta:
        description = "Detects generic shell command execution patterns in binaries"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        hash = "4d1e38f2d345c8ae59818097956be172940ab88ff45c34c1f58bca3f4b8ff212"
        severity = "high"
        family = "Backdoor"
        mitre_att = "T1059" // Command and Scripting Interpreter

    strings:
        // Shell execution strings
        $shell_exec1 = "system(" ascii wide
        $shell_exec2 = "execl" ascii wide
        $shell_exec3 = "execve(" ascii wide
        $shell_exec4 = "CreateProcess" ascii wide
        $shell_exec5 = "popen" ascii wide
        $shell_exec6 = "WinExec" ascii wide

        // Shell command strings
        $shell_cmd1 = "cmd.exe" ascii wide nocase
        $shell_cmd2 = "/bin/sh" ascii wide
        $shell_cmd3 = "/bin/bash" ascii wide
        $shell_cmd4 = "powershell" ascii wide nocase

        // Context indicators
        $context1 = "socket" ascii wide
        $context2 = "connect" ascii wide
        $context3 = "remote" ascii wide

    condition:
        (uint16(0) == 0x5A4D or uint32(0) == 0x464C457F) and
        filesize < 5MB and
        (
            (2 of ($shell_exec*) and 1 of ($shell_cmd*)) or
            (1 of ($shell_exec*) and 2 of ($context*) and 1 of ($shell_cmd*))
        )
}

rule Backdoor_ReverseShell_Network_Pattern {
    meta:
        description = "Detects common reverse shell network communication patterns"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        severity = "critical"
        family = "ReverseShell"
        reference = "Internal malware analysis database"
        mitre_att = "T1059.004" // Command and Scripting Interpreter: Unix Shell

    strings:
        // Socket creation and connection patterns
        $sock1 = "socket(" ascii wide
        $sock2 = "connect(" ascii wide
        $sock3 = "bind(" ascii wide
        $sock4 = "listen(" ascii wide
        $sock5 = "accept(" ascii wide

        // File descriptor redirection
        $redirect1 = "dup" ascii wide
        $redirect2 = "dup2(" ascii wide
        $redirect3 = "fcntl(" ascii wide

        // Standard I/O redirection
        $stdio1 = "STDIN" ascii wide
        $stdio2 = "STDOUT" ascii wide
        $stdio3 = "STDERR" ascii wide
        $stdio4 = "STD_INPUT_HANDLE" ascii wide
        $stdio5 = "STD_OUTPUT_HANDLE" ascii wide

        // Context of shell spawning
        $shell1 = "execve" ascii wide
        $shell2 = "/bin/sh" ascii wide
        $shell3 = "/bin/bash" ascii wide
        $shell4 = "cmd.exe" ascii wide nocase
        $shell5 = "-i" ascii

        // Evasion indicators
        $hidden1 = "setsid" ascii wide
        $hidden2 = "setpgrp" ascii wide
        $hidden3 = "fork" ascii wide
        $hidden4 = "daemon" ascii wide

    condition:
        (uint16(0) == 0x5A4D or uint32(0) == 0x464C457F) and
        filesize < 10MB and
        (
            (2 of ($sock*) and 1 of ($shell*) and 1 of ($redirect*)) or
            (2 of ($sock*) and 1 of ($stdio*) and 1 of ($shell*)) or
            (2 of ($sock*) and 1 of ($redirect*) and 1 of ($hidden*))
        )
}

rule Backdoor_Netcat_Detection {
    meta:
        description = "Detects netcat being used as a backdoor or for reverse shells"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        severity = "high"
        family = "NetcatShell"
        mitre_att = "T1059" // Command and Scripting Interpreter

    strings:
        // Netcat execution with suspicious parameters
        $nc1 = "nc -l" ascii wide
        $nc2 = "netcat -l" ascii wide
        $nc3 = "nc.exe -l" ascii wide
        $nc4 = "ncat -l" ascii wide

        // Reverse shell parameters
        $param1 = "-e" ascii wide
        $param2 = "-c" ascii wide
        $param3 = "-p" ascii wide

        // Shell execution via netcat
        $exec1 = "-e /bin/sh" ascii wide
        $exec2 = "-e /bin/bash" ascii wide
        $exec3 = "-e cmd.exe" ascii wide
        $exec4 = "-c /bin/sh" ascii wide
        $exec5 = "-c /bin/bash" ascii wide

        // Raw mentions of netcat connections
        $raw1 = "| nc " ascii wide
        $raw2 = "| ncat " ascii wide
        $raw3 = "nc -v" ascii wide

        // Context of persistence
        $persist1 = "cron" ascii wide
        $persist2 = "schtasks" ascii wide
        $persist3 = "@reboot" ascii wide
        $persist4 = "startup" ascii wide nocase
        $persist5 = "autostart" ascii wide nocase
        $persist6 = "registry" ascii wide nocase

    condition:
        filesize < 5MB and
        (
            (1 of ($nc*) and 1 of ($exec*)) or
            (1 of ($nc*) and 1 of ($param*) and 1 of ($persist*)) or
            (1 of ($raw*) and 1 of ($persist*))
        )
}

rule Backdoor_PythonReverseShell {
    meta:
        description = "Detects Python-based reverse shell scripts"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        severity = "high"
        family = "PythonBackdoor"
        mitre_att = "T1059.006" // Command and Scripting Interpreter: Python

    strings:
        // Python imports commonly used in reverse shells
        $import1 = "import socket" ascii wide
        $import2 = "import subprocess" ascii wide
        $import3 = "import os" ascii wide
        $import4 = "from subprocess import" ascii wide

        // Socket connection patterns
        $socket1 = "socket.socket(" ascii wide
        $socket2 = ".connect((" ascii wide
        $socket3 = "connect(('" ascii wide
        $socket4 = "connect((\"" ascii wide

        // Command execution patterns
        $exec1 = "subprocess.call" ascii wide
        $exec2 = "subprocess.Popen" ascii wide
        $exec3 = "subprocess.check_output" ascii wide
        $exec4 = "os.system(" ascii wide
        $exec5 = "os.popen(" ascii wide
        $exec6 = "exec(" ascii wide
        $exec7 = "eval(" ascii wide

        // Shell command indicators
        $shell1 = "/bin/bash" ascii wide
        $shell2 = "/bin/sh" ascii wide
        $shell3 = "cmd.exe" ascii wide
        $shell4 = "powershell" ascii wide
        $shell5 = "shell=True" ascii wide

        // Input/output redirection
        $io1 = ".communicate" ascii wide
        $io2 = "stdout=" ascii wide
        $io3 = "stderr=" ascii wide
        $io4 = "stdin=" ascii wide
        $io5 = "PIPE" ascii wide

        // Context indicators
        $magic1 = "#!/usr/bin/env python" ascii
        $magic2 = "#!/usr/bin/python" ascii

    condition:
        (1 of ($magic*) or 2 of ($import*)) and
        filesize < 1MB and
        (
            (1 of ($socket*) and 1 of ($exec*) and 1 of ($io*)) or
            (1 of ($socket*) and 1 of ($shell*) and 1 of ($exec*))
        )
}

rule Backdoor_PerlReverseShell {
    meta:
        description = "Detects Perl-based reverse shell scripts"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        severity = "high"
        family = "PerlBackdoor"
        mitre_att = "T1059.007" // Command and Scripting Interpreter: Perl

    strings:
        // Perl reverse shell indicators
        $magic = "#!/usr/bin/perl" ascii
        $use1 = "use Socket" ascii
        $use2 = "use IO::Handle" ascii
        $use3 = "use IO" ascii

        // Socket connections
        $sock1 = "socket(" ascii
        $sock2 = "connect(" ascii
        $sock3 = "PF_INET" ascii
        $sock4 = "SOCK_STREAM" ascii

        // Execution patterns
        $exec1 = "exec {" ascii
        $exec2 = "open(" ascii
        $exec3 = "system(" ascii
        $exec4 = "fork" ascii

        // Shell indicators
        $shell1 = "/bin/sh" ascii
        $shell2 = "/bin/bash" ascii
        $shell3 = "cmd.exe" ascii nocase
        $shell4 = "-e" ascii

        // File descriptor operations
        $fd1 = "fileno(" ascii
        $fd2 = "STDIN" ascii
        $fd3 = "STDOUT" ascii
        $fd4 = "STDERR" ascii
        $fd5 = "dup" ascii
        $fd6 = "dup2(" ascii

    condition:
        ($magic or 2 of ($use*)) and
        filesize < 1MB and
        (
            (2 of ($sock*) and 1 of ($exec*)) or
            (1 of ($sock*) and 1 of ($shell*) and 1 of ($fd*)) or
            (1 of ($sock*) and 2 of ($fd*) and 1 of ($exec*))
        )
}

rule Backdoor_PhpWebShell_ReverseConnection {
    meta:
        description = "Detects PHP web shells that establish reverse connections"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        severity = "high"
        family = "PHPBackdoor"
        mitre_att = "T1059.001" // Command and Scripting Interpreter: PowerShell

    strings:
        // PHP indicators
        $php_tag = "<?php" ascii

        // Socket functions
        $sock1 = "fsockopen(" ascii
        $sock2 = "socket_create(" ascii
        $sock3 = "socket_connect(" ascii

        // Process execution
        $exec1 = "shell_exec(" ascii
        $exec2 = "system(" ascii
        $exec3 = "exec(" ascii
        $exec4 = "passthru(" ascii
        $exec5 = "popen(" ascii
        $exec6 = "proc_open(" ascii

        // Data transmission
        $comm1 = "fwrite(" ascii
        $comm2 = "fputs(" ascii
        $comm3 = "fread(" ascii
        $comm4 = "fgets(" ascii
        $comm5 = "stream_" ascii

        // Evasion techniques
        $evasion1 = "base64_decode(" ascii
        $evasion2 = "eval(" ascii
        $evasion3 = "gzinflate(" ascii
        $evasion4 = "str_rot13(" ascii
        $evasion5 = "preg_replace" ascii
        $evasion6 = "create_function" ascii

        // Common encoding patterns
        $encode1 = "base64," ascii
        $encode2 = "chr(" ascii

    condition:
        $php_tag and
        filesize < 1MB and
        (
            (1 of ($sock*) and 1 of ($exec*) and 1 of ($comm*)) or
            (1 of ($sock*) and 1 of ($evasion*) and 1 of ($exec*)) or
            (1 of ($sock*) and 1 of ($evasion*) and 1 of ($comm*))
        )
}

rule Backdoor_PowerShellReverseShell {
    meta:
        description = "Detects PowerShell-based reverse shells and backdoors"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        severity = "high"
        family = "PowerShellBackdoor"
        mitre_att = "T1059.001" // Command and Scripting Interpreter: PowerShell

    strings:
        // PowerShell indicators
        $ps_indicator1 = "powershell" ascii wide nocase
        $ps_indicator2 = ".ps1" ascii wide nocase

        // Socket/connection functions
        $net1 = "New-Object Net.Sockets.TCPClient" ascii wide nocase
        $net2 = "System.Net.Sockets" ascii wide nocase
        $net3 = "[System.Net.Sockets.TCPClient]" ascii wide
        $net4 = "GetStream(" ascii wide

        // Stream manipulation
        $stream1 = "[byte[]]$bytes" ascii wide
        $stream2 = "GetString($bytes" ascii wide
        $stream3 = "StreamReader" ascii wide
        $stream4 = "StreamWriter" ascii wide

        // Command execution
        $exec1 = "Invoke-Expression" ascii wide nocase
        $exec2 = "IEX" ascii wide
        $exec3 = "Start-Process" ascii wide
        $exec4 = "&{" ascii wide
        $exec5 = "ScriptBlock" ascii wide

        // Encode/decode functions
        $encode1 = "FromBase64String(" ascii wide
        $encode2 = "ToBase64String(" ascii wide
        $encode3 = "Encoding.UTF8.GetString" ascii wide
        $encode4 = "[Convert]" ascii wide

        // Common base64 patterns for PowerShell payloads
        $b64_1 = "JAB" ascii wide // $
        $b64_2 = "SUVY" ascii wide // IEX
        $b64_3 = "TmV3LU9iamVjdCA" ascii wide // New-Object
        $b64_4 = "UG93ZXJTaGVsbA" ascii wide // PowerShell

    condition:
        (1 of ($ps_indicator*) or 2 of ($b64*)) and
        filesize < 1MB and
        (
            (1 of ($net*) and 1 of ($exec*)) or
            (1 of ($net*) and 1 of ($stream*)) or
            (1 of ($encode*) and 1 of ($net*)) or
            (1 of ($encode*) and 1 of ($exec*) and 1 of ($stream*))
        )
}

rule Backdoor_Unix_BindShell {
    meta:
        description = "Detects Unix-based bind shells that listen for incoming connections"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        severity = "high"
        family = "UnixBindShell"
        mitre_att = "T1059.004" // Command and Scripting Interpreter: Unix Shell

    strings:
        // Socket creation and binding
        $socket1 = "socket(" ascii
        $socket2 = "bind(" ascii
        $socket3 = "listen(" ascii
        $socket4 = "accept(" ascii

        // Common port numbers used in bind shells (as strings)
        $port1 = "4444" ascii wide
        $port2 = "1337" ascii wide
        $port3 = "9001" ascii wide
        $port4 = "31337" ascii wide
        $port5 = "8080" ascii wide

        // Fork and exec patterns
        $proc1 = "fork(" ascii
        $proc2 = "dup2(" ascii
        $proc3 = "execl(" ascii
        $proc4 = "execve(" ascii

        // Shell paths
        $shell1 = "/bin/sh" ascii
        $shell2 = "/bin/bash" ascii
        $shell3 = "/bin/dash" ascii
        $shell4 = "/bin/csh" ascii
        $shell5 = "/bin/ksh" ascii

        // ELF specific strings
        $elf_str1 = "SOCK_STREAM" ascii
        $elf_str2 = "AF_INET" ascii

        // Full assembly patterns for listening socket
        $asm1 = { B0 66 31 DB B3 01 31 C9 51 53 6A 02 89 E1 CD 80 } // socket() syscall
        $asm2 = { B0 66 31 DB B3 02 51 89 E1 CD 80 } // bind() syscall pattern
        $asm3 = { B0 66 31 DB B3 04 51 89 E1 CD 80 } // listen() syscall pattern
        $asm4 = { B0 66 31 DB B3 05 51 89 E1 CD 80 } // accept() syscall pattern

    condition:
        uint32(0) == 0x464C457F and // ELF header
        filesize < 2MB and
        (
            (2 of ($socket*) and 1 of ($shell*) and 1 of ($proc*)) or
            (2 of ($socket*) and 1 of ($port*) and 1 of ($shell*)) or
            (1 of ($asm*) and 1 of ($elf_str*) and 1 of ($shell*)) or
            (3 of ($asm*))
        )
}

rule Backdoor_Windows_ServiceInstaller {
    meta:
        description = "Detects Windows backdoors that install themselves as services"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        severity = "high"
        family = "WindowsBackdoor"
        mitre_att = "T1543.003" // Create or Modify System Process: Windows Service

    strings:
        // Service creation APIs
        $svc1 = "CreateService" ascii wide
        $svc2 = "OpenSCManager" ascii wide
        $svc3 = "StartServiceCtrl" ascii wide
        $svc4 = "RegisterServiceCtrl" ascii wide
        $svc5 = "OpenService" ascii wide

        // Command execution
        $cmd1 = "cmd.exe" ascii wide
        $cmd2 = "powershell" ascii wide
        $cmd3 = "CreateProcess" ascii wide
        $cmd4 = "ShellExecute" ascii wide
        $cmd5 = "WinExec" ascii wide

        // Socket functions
        $net1 = "WSAStartup" ascii wide
        $net2 = "socket(" ascii wide
        $net3 = "connect(" ascii wide
        $net4 = "bind(" ascii wide
        $net5 = "listen(" ascii wide
        $net6 = "accept(" ascii wide

        // Autostart methods
        $auto1 = "CurrentVersion\\Run" ascii wide
        $auto2 = "MACHINE\\SOFTWARE" ascii wide
        $auto3 = "Registry" ascii wide

        // Suspicious strings
        $sus1 = "backdoor" ascii wide nocase
        $sus2 = "remote access" ascii wide nocase
        $sus3 = "keylogger" ascii wide nocase
        $sus4 = "rootkit" ascii wide nocase

    condition:
        uint16(0) == 0x5A4D and pe.is_pe and
        filesize < 5MB and
        (
            (2 of ($svc*) and 1 of ($cmd*) and 1 of ($net*)) or
            (1 of ($svc*) and 1 of ($cmd*) and 2 of ($net*)) or
            (1 of ($svc*) and 1 of ($auto*) and 1 of ($sus*))
        )
}

rule Backdoor_SUID_Shell_Binary {
    meta:
        description = "Detects potentially malicious SUID shell binaries"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        severity = "critical"
        family = "UnixBackdoor"
        mitre_att = "T1548.001" // Abuse Elevation Control Mechanism: Setuid and Setgid

    strings:
        // Permission modification
        $perm1 = "chmod" ascii wide
        $perm2 = "setuid" ascii wide
        $perm3 = "setgid" ascii wide
        $perm4 = "chown" ascii wide

        // Shell execution
        $shell1 = "execve" ascii wide
        $shell2 = "/bin/sh" ascii wide
        $shell3 = "/bin/bash" ascii wide

        // Process manipulation
        $proc1 = "setresuid" ascii wide
        $proc2 = "setresgid" ascii wide
        $proc3 = "setreuid" ascii wide
        $proc4 = "setregid" ascii wide

        // Binary code patterns for setuid(0)
        $code1 = { B0 17 31 DB CD 80 } // setuid(0) on x86
        $code2 = { 31 C0 31 DB B0 17 CD 80 } // setuid(0) variant
        $code3 = { 48 31 FF B8 69 00 00 00 0F 05 } // setuid(0) on x86_64

    condition:
        uint32(0) == 0x464C457F and // ELF header
        filesize < 100KB and
        (
            (1 of ($proc*) and 1 of ($shell*)) or
            (1 of ($perm*) and 1 of ($shell*)) or
            (1 of ($code*) and 1 of ($shell*)) or
            (2 of ($code*))
        )
}

rule Backdoor_JavaScript_ReverseShell {
    meta:
        description = "Detects JavaScript-based reverse shells"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        severity = "high"
        family = "JavaScriptBackdoor"
        mitre_att = "T1059.007" // Command and Scripting Interpreter: JavaScript

    strings:
        // Node.js patterns
        $node1 = "require('child_process')" ascii wide
        $node2 = "require('net')" ascii wide
        $node3 = "require(\"child_process\")" ascii wide
        $node4 = "require(\"net\")" ascii wide

        // Socket connections
        $net1 = "net.connect" ascii wide
        $net2 = "net.Socket" ascii wide
        $net3 = "createConnection" ascii wide

        // Process spawning
        $exec1 = "spawn(" ascii wide
        $exec2 = "exec(" ascii wide
        $exec3 = "execSync(" ascii wide
        $exec4 = "spawnSync(" ascii wide

        // Command strings
        $cmd1 = "cmd.exe" ascii wide nocase
        $cmd2 = "powershell" ascii wide nocase
        $cmd3 = "/bin/sh" ascii wide
        $cmd4 = "/bin/bash" ascii wide

        // Data transmission
        $comm1 = ".pipe(" ascii wide
        $comm2 = ".on('data'" ascii wide
        $comm3 = ".write(" ascii wide
        $comm4 = ".stdout" ascii wide
        $comm5 = ".stderr" ascii wide

    condition:
        filesize < 1MB and
        (
            (1 of ($node*) and 1 of ($net*) and 1 of ($exec*)) or
            (1 of ($net*) and 1 of ($cmd*) and 1 of ($comm*)) or
            (1 of ($node*) and 1 of ($exec*) and 1 of ($comm*))
        )
}

rule Backdoor_MemoryInjection_Techniques {
    meta:
        description = "Detects common memory injection techniques used by backdoors"
        author = "Security Team"
        date = "2024-07-15"
        version = "1.0"
        severity = "critical"
        family = "MemoryBackdoor"
        mitre_att = "T1055" // Process Injection

    strings:
        // Windows Memory functions
        $mem_win1 = "VirtualAlloc" ascii wide
        $mem_win2 = "VirtualProtect" ascii wide
        $mem_win3 = "WriteProcessMemory" ascii wide
        $mem_win4 = "CreateRemoteThread" ascii wide
        $mem_win5 = "RtlMoveMemory" ascii wide
        $mem_win6 = "memcpy" ascii wide

        // Unix memory functions
        $mem_nix1 = "mmap" ascii
        $mem_nix2 = "memfd_create" ascii
        $mem_nix3 = "ptrace" ascii

        // Process open/manipulation
        $proc1 = "OpenProcess" ascii wide
        $proc2 = "CreateProcess" ascii wide
        $proc3 = "fork" ascii
        $proc4 = "clone" ascii

        // Shellcode patterns
        $shellcode1 = { 55 8B EC } // x86 prologue
        $shellcode2 = { 48 89 E5 } // x64 prologue
        $shellcode3 = { FC E8 ?? ?? ?? ?? } // Common shellcode starter
        $shellcode4 = { EB ?? ?? ?? ?? ?? } // JMP instruction

        // Suspicious strings indicating shell/backdoor behavior
        $susp1 = "shellcode" ascii wide nocase
        $susp2 = "payload" ascii wide nocase
        $susp3 = "inject" ascii wide nocase
        $susp4 = "backdoor" ascii wide nocase

    condition:
        (uint16(0) == 0x5A4D or uint32(0) == 0x464C457F) and
        filesize < 10MB and
        (
            (2 of ($mem_win*) and 1 of ($proc*)) or
            (1 of ($mem_nix*) and 1 of ($proc*)) or
            (1 of ($shellcode*) and (1 of ($mem_win*) or 1 of ($mem_nix*))) or
            (2 of ($mem_win*) and 1 of ($susp*))
        )
}
