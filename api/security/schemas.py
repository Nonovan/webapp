"""
Data validation schemas for the Security API module.

This module defines Marshmallow schemas used for validating incoming request data
and serializing outgoing responses for security-related endpoints, including
incidents, vulnerabilities, scans, and threats.
"""

import logging
from marshmallow import Schema, fields, validate, ValidationError, validates_schema

# Initialize module logger
logger = logging.getLogger(__name__)

# --- Common Schemas ---

class BaseSchema(Schema):
    """Base schema with common settings."""
    class Meta:
        # Default behavior: exclude unknown fields
        unknown = 'exclude'

class PaginationSchema(BaseSchema):
    """Schema for pagination parameters."""
    page = fields.Int(missing=1, validate=validate.Range(min=1))
    per_page = fields.Int(missing=20, validate=validate.Range(min=1, max=100))
    sort_by = fields.Str(missing='created_at')
    sort_direction = fields.Str(
        missing='desc',
        validate=validate.OneOf(['asc', 'desc'])
    )

# --- Security Incident Schemas ---

class IncidentSchema(BaseSchema):
    """Schema for representing a security incident."""
    id = fields.Int(dump_only=True)
    title = fields.Str(required=True, validate=validate.Length(min=3, max=128))
    incident_type = fields.Str(
        required=True,
        validate=validate.OneOf(['malware', 'phishing', 'unauthorized_access', 'data_breach', 'dos', 'other'])
    )
    description = fields.Str(required=True, validate=validate.Length(min=10, max=1024))
    details = fields.Dict(required=False, missing={})
    severity = fields.Str(
        required=True,
        validate=validate.OneOf(['critical', 'high', 'medium', 'low', 'info'])
    )
    status = fields.Str(
        required=True,
        validate=validate.OneOf(['new', 'investigating', 'contained', 'resolved', 'closed'])
    )
    source = fields.Str(required=False, validate=validate.Length(max=50))
    ip_address = fields.Str(required=False, validate=validate.Regexp(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$'))
    resolution = fields.Str(required=False, validate=validate.Length(max=1024))
    assigned_to_id = fields.Int(required=False, allow_none=True)
    resolved_at = fields.DateTime(dump_only=True, allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class IncidentCreateSchema(IncidentSchema):
    """Schema for creating a new security incident."""
    class Meta(IncidentSchema.Meta):
        # Exclude fields generated by the server
        exclude = ('id', 'resolved_at', 'created_at', 'updated_at')

class IncidentUpdateSchema(BaseSchema):
    """Schema for updating an existing security incident."""
    title = fields.Str(validate=validate.Length(min=3, max=128))
    description = fields.Str(validate=validate.Length(min=10, max=1024))
    details = fields.Dict()
    severity = fields.Str(validate=validate.OneOf(['critical', 'high', 'medium', 'low', 'info']))
    status = fields.Str(validate=validate.OneOf(['investigating', 'contained', 'resolved', 'closed']))
    resolution = fields.Str(validate=validate.Length(max=1024))
    assigned_to_id = fields.Int(allow_none=True)

class IncidentFilterSchema(PaginationSchema):
    """Schema for filtering security incidents."""
    incident_type = fields.Str(validate=validate.OneOf(['malware', 'phishing', 'unauthorized_access', 'data_breach', 'dos', 'other']))
    severity = fields.Str(validate=validate.OneOf(['critical', 'high', 'medium', 'low', 'info']))
    status = fields.Str(validate=validate.OneOf(['new', 'investigating', 'contained', 'resolved', 'closed']))
    assigned_to_id = fields.Int()
    start_date = fields.DateTime()
    end_date = fields.DateTime()

    @validates_schema
    def validate_dates(self, data, **kwargs):
        if data.get('start_date') and data.get('end_date') and data['start_date'] > data['end_date']:
            raise ValidationError("Start date must be before end date.", "start_date")

# --- Vulnerability Schemas ---

class VulnerabilitySchema(BaseSchema):
    """Schema for representing a vulnerability."""
    id = fields.Int(dump_only=True)
    title = fields.Str(required=True, validate=validate.Length(min=5, max=255))
    description = fields.Str(required=True, validate=validate.Length(min=10))
    cve_id = fields.Str(required=False, validate=validate.Regexp(r'^CVE-\d{4}-\d{4,}$'))
    cvss_score = fields.Float(required=False, validate=validate.Range(min=0.0, max=10.0))
    severity = fields.Str(
        required=True,
        validate=validate.OneOf(['critical', 'high', 'medium', 'low', 'info'])
    )
    status = fields.Str(
        required=True,
        validate=validate.OneOf(['open', 'confirmed', 'remediating', 'resolved', 'false_positive'])
    )
    affected_resources = fields.List(fields.Str(), required=False, missing=[])
    remediation_steps = fields.Str(required=False)
    discovered_at = fields.DateTime(required=False, allow_none=True)
    resolved_at = fields.DateTime(dump_only=True, allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class VulnerabilityCreateSchema(VulnerabilitySchema):
    """Schema for creating a new vulnerability."""
    class Meta(VulnerabilitySchema.Meta):
        exclude = ('id', 'resolved_at', 'created_at', 'updated_at')

class VulnerabilityUpdateSchema(BaseSchema):
    """Schema for updating an existing vulnerability."""
    title = fields.Str(validate=validate.Length(min=5, max=255))
    description = fields.Str(validate=validate.Length(min=10))
    cvss_score = fields.Float(validate=validate.Range(min=0.0, max=10.0))
    severity = fields.Str(validate=validate.OneOf(['critical', 'high', 'medium', 'low', 'info']))
    status = fields.Str(validate=validate.OneOf(['confirmed', 'remediating', 'resolved', 'false_positive']))
    affected_resources = fields.List(fields.Str())
    remediation_steps = fields.Str()

class VulnerabilityFilterSchema(PaginationSchema):
    """Schema for filtering vulnerabilities."""
    severity = fields.Str(validate=validate.OneOf(['critical', 'high', 'medium', 'low', 'info']))
    status = fields.Str(validate=validate.OneOf(['open', 'confirmed', 'remediating', 'resolved', 'false_positive']))
    cve_id = fields.Str(validate=validate.Regexp(r'^CVE-\d{4}-\d{4,}$'))
    resource = fields.Str() # Filter by affected resource identifier
    start_date = fields.DateTime()
    end_date = fields.DateTime()

    @validates_schema
    def validate_dates(self, data, **kwargs):
        if data.get('start_date') and data.get('end_date') and data['start_date'] > data['end_date']:
            raise ValidationError("Start date must be before end date.", "start_date")

# --- Security Scan Schemas ---

class ScanSchema(BaseSchema):
    """Schema for representing a security scan."""
    id = fields.Int(dump_only=True)
    scan_type = fields.Str(
        required=True,
        validate=validate.OneOf(['vulnerability', 'compliance', 'configuration', 'full'])
    )
    status = fields.Str(
        required=True,
        validate=validate.OneOf(['queued', 'in_progress', 'completed', 'failed', 'cancelled'])
    )
    targets = fields.List(fields.Str(), required=True, validate=validate.Length(min=1))
    profile_id = fields.Int(required=False, allow_none=True) # Optional scan profile/template
    initiated_by_id = fields.Int(dump_only=True, allow_none=True)
    start_time = fields.DateTime(dump_only=True, allow_none=True)
    end_time = fields.DateTime(dump_only=True, allow_none=True)
    findings_summary = fields.Dict(dump_only=True, missing={}) # e.g., {'critical': 1, 'high': 5}
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class ScanCreateSchema(BaseSchema):
    """Schema for creating/initiating a new security scan."""
    scan_type = fields.Str(
        required=True,
        validate=validate.OneOf(['vulnerability', 'compliance', 'configuration', 'full'])
    )
    targets = fields.List(fields.Str(), required=True, validate=validate.Length(min=1))
    profile_id = fields.Int(required=False, allow_none=True)
    # Add other potential creation parameters like schedule, specific options, etc.
    options = fields.Dict(required=False, missing={})

class ScanUpdateSchema(BaseSchema):
    """Schema for updating scan status (e.g., cancelling)."""
    status = fields.Str(required=True, validate=validate.OneOf(['cancelled']))

class ScanFilterSchema(PaginationSchema):
    """Schema for filtering security scans."""
    scan_type = fields.Str(validate=validate.OneOf(['vulnerability', 'compliance', 'configuration', 'full']))
    status = fields.Str(validate=validate.OneOf(['queued', 'in_progress', 'completed', 'failed', 'cancelled']))
    initiated_by_id = fields.Int()
    target = fields.Str() # Filter by a specific target
    start_date = fields.DateTime()
    end_date = fields.DateTime()

    @validates_schema
    def validate_dates(self, data, **kwargs):
        if data.get('start_date') and data.get('end_date') and data['start_date'] > data['end_date']:
            raise ValidationError("Start date must be before end date.", "start_date")

# --- Threat Intelligence Schemas ---

class ThreatIndicatorSchema(BaseSchema):
    """Schema for representing a threat indicator (IOC)."""
    id = fields.Int(dump_only=True)
    indicator_type = fields.Str(
        required=True,
        validate=validate.OneOf(['ip_address', 'domain', 'url', 'file_hash', 'email_address'])
    )
    value = fields.Str(required=True, validate=validate.Length(min=1))
    description = fields.Str(required=False)
    source = fields.Str(required=False)
    severity = fields.Str(
        required=False,
        validate=validate.OneOf(['high', 'medium', 'low', 'info']),
        missing='medium'
    )
    confidence = fields.Int(required=False, validate=validate.Range(min=0, max=100), missing=50)
    tags = fields.List(fields.Str(), required=False, missing=[])
    first_seen = fields.DateTime(required=False, allow_none=True)
    last_seen = fields.DateTime(required=False, allow_none=True)
    is_active = fields.Bool(missing=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class ThreatIndicatorCreateSchema(ThreatIndicatorSchema):
    """Schema for creating a new threat indicator."""
    class Meta(ThreatIndicatorSchema.Meta):
        exclude = ('id', 'created_at', 'updated_at')

class ThreatIndicatorUpdateSchema(BaseSchema):
    """Schema for updating an existing threat indicator."""
    description = fields.Str()
    severity = fields.Str(validate=validate.OneOf(['high', 'medium', 'low', 'info']))
    confidence = fields.Int(validate=validate.Range(min=0, max=100))
    tags = fields.List(fields.Str())
    last_seen = fields.DateTime(allow_none=True)
    is_active = fields.Bool()

class ThreatIndicatorFilterSchema(PaginationSchema):
    """Schema for filtering threat indicators."""
    indicator_type = fields.Str(validate=validate.OneOf(['ip_address', 'domain', 'url', 'file_hash', 'email_address']))
    value = fields.Str()
    severity = fields.Str(validate=validate.OneOf(['high', 'medium', 'low', 'info']))
    source = fields.Str()
    tag = fields.Str() # Filter by tag
    is_active = fields.Bool()
    min_confidence = fields.Int(validate=validate.Range(min=0, max=100))
    start_date = fields.DateTime(data_key="first_seen_after")
    end_date = fields.DateTime(data_key="last_seen_before")

    @validates_schema
    def validate_dates(self, data, **kwargs):
        if data.get('start_date') and data.get('end_date') and data['start_date'] > data['end_date']:
            raise ValidationError("Start date must be before end date.", "start_date")

# --- Schema Instantiations ---
# Instantiate schemas for easy import and use in routes

# Incident Schemas
incident_schema = IncidentSchema()
incidents_schema = IncidentSchema(many=True)
incident_create_schema = IncidentCreateSchema()
incident_update_schema = IncidentUpdateSchema()
incident_filter_schema = IncidentFilterSchema()

# Vulnerability Schemas
vulnerability_schema = VulnerabilitySchema()
vulnerabilities_schema = VulnerabilitySchema(many=True)
vulnerability_create_schema = VulnerabilityCreateSchema()
vulnerability_update_schema = VulnerabilityUpdateSchema()
vulnerability_filter_schema = VulnerabilityFilterSchema()

# Scan Schemas
scan_schema = ScanSchema()
scans_schema = ScanSchema(many=True)
scan_create_schema = ScanCreateSchema()
scan_update_schema = ScanUpdateSchema()
scan_filter_schema = ScanFilterSchema()

# Threat Indicator Schemas
threat_indicator_schema = ThreatIndicatorSchema()
threat_indicators_schema = ThreatIndicatorSchema(many=True)
threat_indicator_create_schema = ThreatIndicatorCreateSchema()
threat_indicator_update_schema = ThreatIndicatorUpdateSchema()
threat_indicator_filter_schema = ThreatIndicatorFilterSchema()

logger.debug("Security API schemas initialized.")
