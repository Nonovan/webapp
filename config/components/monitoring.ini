; Monitoring configuration for Cloud Infrastructure Platform
; This file contains monitoring-related settings for metrics, alerts, and health checks

[general]
; General monitoring settings
enabled = true
environment = ${ENVIRONMENT:-production}
region = ${REGION:-primary}
instance_id = ${INSTANCE_ID:-auto}
monitoring_version = 1.2.0
service_name = cloud-platform
log_level = INFO
log_path = /var/log/cloud-platform/monitoring.log
data_retention_days = 90
include_hostname = true
collect_runtime_metrics = true
metrics_collection_interval = 60
user_monitoring_consent_required = true

[service_monitoring]
; Service health check settings
health_check_interval = 300
health_check_timeout = 30
health_check_retries = 3
circuit_breaker_enabled = true
circuit_breaker_timeout = 60
connection_pool_size = 10
verify_ssl_certificates = true
require_tag_annotations = true
allow_self_signed_in_dev = true
performance_alert_threshold_p95 = 2000
health_check_authentication = bearer_token

[metrics]
; Metrics collection settings
metrics_enabled = true
prometheus_endpoint = ${PROMETHEUS_URL:-http://localhost:9090}
statsd_host = ${STATSD_HOST:-localhost}
statsd_port = ${STATSD_PORT:-8125}
push_metrics = true
push_interval = 15
metrics_prefix = cloud_platform
collect_system_metrics = true
collect_application_metrics = true
collect_database_metrics = true
collect_api_metrics = true
collect_custom_metrics = true
histogram_buckets = 0.005,0.01,0.025,0.05,0.1,0.25,0.5,1,2.5,5,10
export_native_metrics = true
export_to_prometheus = true
export_to_cloudwatch = false
jvm_metrics_enabled = true
process_metrics_enabled = true
mute_metrics_in_test = true

[thresholds]
; System metric thresholds
cpu_warning = 80
cpu_critical = 95
memory_warning = 80
memory_critical = 90
disk_warning = 80
disk_critical = 90
load_warning = 2.0
load_critical = 4.0
connection_warning = 1000
connection_critical = 2000
error_rate_warning = 1.0
error_rate_critical = 5.0
latency_warning_ms = 1000
latency_critical_ms = 3000
api_error_threshold = 5.0
database_latency_threshold_ms = 500
queue_depth_warning = 100
queue_depth_critical = 500
thread_count_warning = 100
thread_count_critical = 200

[alerts]
; Alert settings
alerts_enabled = true
alertmanager_url = ${ALERTMANAGER_URL:-http://localhost:9093}
notify_on_threshold_breach = true
send_recovery_notifications = true
notification_throttle_seconds = 300
alert_deduplication = true
alert_grouping = true
group_wait_seconds = 30
group_interval_seconds = 300
repeat_interval_seconds = 14400
default_severity = warning
silence_during_maintenance = true
include_runbook_url = true
alerts_database = /var/lib/cloud-platform/alerts.db

[notification_channels]
; Notification channel settings
email_enabled = true
email_recipients = ops@example.com,alerts@example.com
sms_enabled = false
sms_recipients =
webhook_enabled = true
webhook_url = ${WEBHOOK_URL:-}
pagerduty_enabled = ${PAGERDUTY_ENABLED:-false}
pagerduty_service_key = ${PAGERDUTY_KEY:-}
slack_enabled = ${SLACK_ENABLED:-true}
slack_webhook = ${SLACK_WEBHOOK:-}
slack_channel = #cloud-platform-alerts
teams_enabled = false
teams_webhook =
critical_notification_hours = 0-23
warning_notification_hours = 8-18
notification_timezone = UTC

[resources]
; Resource monitoring settings
collect_host_metrics = true
disk_paths = /,/var/lib/cloud-platform,/var/log
monitor_network_interfaces = eth0,lo
io_devices = xvda,xvdb
process_count_warning = 500
process_count_critical = 1000
monitor_docker_containers = true
monitor_kubernetes_pods = true
monitor_database_connections = true
inode_warning = 80
inode_critical = 90

[logging]
; Log monitoring settings
log_monitoring_enabled = true
log_patterns_file = /etc/cloud-platform/log-patterns.json
error_pattern = ERROR|SEVERE|FATAL
warning_pattern = WARN|WARNING
scan_application_logs = true
log_scan_interval = 60
log_retention_days = 30
error_context_lines = 10
max_log_size_mb = 100
rotate_logs_at_size_mb = 20
compress_rotated_logs = true

[api_monitoring]
; API endpoint monitoring
api_monitoring_enabled = true
endpoints_file = /etc/cloud-platform/api-endpoints.json
request_timeout = 10
user_agent = Cloud-Platform-Monitor/1.2
follow_redirects = true
validate_response = true
validate_schema = false
track_dependencies = true
decode_compressed = true
circuit_breaker_threshold = 5
exponential_backoff = true

[security_monitoring]
; Security monitoring settings
security_monitoring_enabled = true
scan_for_vulnerabilities = true
monitor_auth_failures = true
brute_force_detection = true
auth_failure_threshold = 5
privilege_escalation_detection = true
file_integrity_monitoring = true
ip_reputation_check = true
monitor_suspicious_processes = true
detect_crypto_mining = true
configuration_drift_detection = true
sensitive_operation_audit = true
alert_on_root_login = true

[visualization]
; Monitoring visualization settings
dashboard_url = ${GRAFANA_URL:-http://localhost:3000}
default_dashboard = cloud-platform-overview
refresh_interval = 60
theme = light
default_time_range = last 6 hours
default_data_source = Prometheus
embed_enabled = true
public_dashboards_enabled = false
custom_dashboards_path = /etc/cloud-platform/dashboards
create_dashboards_automatically = true
dashboard_permission_sync = true

[health_checks]
; Health check settings
health_check_enabled = true
health_history_count = 10
synthetic_monitoring = true
health_endpoint = /health
health_check_components = database,cache,storage,api,auth,queue
dependency_health_checks = true
component_dependencies = database:api,auth:api,cache:api
report_path = /var/lib/cloud-platform/health-reports
report_format = json,html
overall_health_requires = database,api,auth
